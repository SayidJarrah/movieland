<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <util:map id="queryMap" map-class="java.util.HashMap">
        <entry key="isRatedByCurrentUser" value="SELECT COUNT(*) FROM rate WHERE movie_id = ? AND user_id = ?"/>
        <entry key="addRate" value="INSERT INTO rate (rating,user_id,movie_id) VALUES (?,?,?)"/>
        <entry key="updateOwnRate" value="UPDATE rate SET rating = ? WHERE movie_id = ? AND user_id = ?"/>
        <entry key="updateTotalRate"
               value="UPDATE movie SET rating = (SELECT ROUND(SUM(rating)/COUNT(rating),1) FROM rate) WHERE id=?"/>
        <entry key="getAllMovies" value="SELECT m.id, m.name, m.year, m.description, m.rating, m.price,
                                       m.picturePath, g.id genre_id, g.name genre, c.name country,
                                       c.id country_id
                                FROM   movie m, movie_has_genre mhg, genre g,
                                       movie_has_country mhc, country c
                                WHERE  m.id=mhg.movie_id
                                AND    mhg.genre_id=g.id
                                AND    m.id=mhc.movie_id
                                AND    mhc.country_id=c.id"/>
        <entry key="getRandomMovies" value="SELECT m.id, m.name, m.year, m.description, m.rating, m.price,
                                       m.picturePath, g.id genre_id, g.name genre, c.name country,
                                       c.id country_id
                                FROM   movie m, movie_has_genre mhg, genre g,
                                       movie_has_country mhc, country c
                                WHERE  m.id=mhg.movie_id
                                AND    mhg.genre_id=g.id
                                AND    m.id=mhc.movie_id
                                AND    mhc.country_id=c.id
                                ORDER BY RAND()
                                LIMIT 3;"/>
        <entry key="getMoviesByGenre" value="SELECT m.id, m.name, m.year, m.description, m.rating, m.price,
                                       m.picturePath, g.id genre_id, g.name genre, c.name country,
                                       c.id country_id
                                FROM   movie m, movie_has_genre mhg, genre g,
                                       movie_has_country mhc, country c
                                WHERE  m.id=mhg.movie_id
                                AND    mhg.genre_id=g.id
                                AND    m.id=mhc.movie_id
                                AND    mhc.country_id=c.id
                                AND    g.id = ?"/>
        <entry key="getAllGenres" value="SELECT id, name FROM genre;"/>
        <entry key="getMovieById" value="SELECT m.id, m.name, m.year, m.description, m.rating, m.price,
                                         m.picturePath, g.id genre_id, g.name genre, c.name country,
                                         c.id country_id, r.id review_id, r.text, u.id user_id,
                                         u.first_name, u.last_name
                                FROM movie m
                                LEFT JOIN review r
                                ON r.movie_id=m.id
                                LEFT JOIN user u
                                ON r.user_id=u.id
                                JOIN movie_has_genre mhg
                                ON m.id=mhg.movie_id
                                JOIN genre g
                                ON mhg.genre_id=g.id
                                JOIN movie_has_country mhc
                                ON m.id=mhc.movie_id
                                JOIN country c
                                ON mhc.country_id=c.id
                                WHERE m.id=?"/>
        <entry key="getUserByEmail" value="SELECT * FROM user WHERE email = ?"/>
        <entry key="addReview" value="INSERT INTO review (user_id,movie_id,text) values (?,?,?);"/>
        <entry key="addMovie"
               value="INSERT INTO movie (name,picturePath,year,description,rating,price) values(?,?,?,?,?,?);"/>
        <entry key="editMovie"
               value="UPDATE movie SET name = ?, picturePath = ? ,year=?,description=? ,rating=?,price=? WHERE id =?;"/>
        <entry key="addToMovieHasCountry" value="INSERT INTO movie_has_country (movie_id,country_id) values(?,?)"/>
        <entry key="addToMovieHasGenre" value="INSERT INTO movie_has_genre (movie_id,genre_id) values(?,?)"/>
        <entry key="getAllCountries" value="SELECT * FROM country"/>
        <entry key="cleanUpMovieHasGenreWhenEditMovie" value="DELETE FROM movie_has_genre WHERE movie_id = ?"/>
        <entry key="cleanUpMovieHasCountryWhenEditMovie" value="DELETE FROM movie_has_country WHERE movie_id = ?"/>
        <entry key="getOwnRatingForMovie" value="SELECT rating FROM rate WHERE movie_id =? AND user_id = ?"/>
        <entry key="search" value="SELECT m.id, m.name, m.year, m.description, m.rating, m.price,
                                       m.picturePath, g.id genre_id, g.name genre, c.name country,
                                       c.id country_id
                                FROM   movie m, movie_has_genre mhg, genre g,
                                       movie_has_country mhc, country c
                                WHERE  m.id=mhg.movie_id
                                AND    mhg.genre_id=g.id
                                AND    m.id=mhc.movie_id
                                AND    mhc.country_id=c.id
                                AND    m.name LIKE ?"/>
        <entry key="searchMovieCount" value="SELECT COUNT(*) FROM movie WHERE name LIKE ?"/>
        <entry key="markForRemoving" value="UPDATE movie SET marked_for_removing = 1 where id = ?"/>
        <entry key="uncheckRemoving" value="UPDATE movie SET marked_for_removing = NULL where id = ?"/>
        <entry key="deleteMarkedMovie" value="DELETE FROM movie WHERE marked_for_removing=1"/>
        <entry key="selectMarkedMovies" value="SELECT id FROM movie WHERE marked_for_removing=1"/>
        <entry key="deleteMarkedMoviesFromMovieHasGenre" value="DELETE FROM movie_has_genre WHERE movie_id IN (:ids)"/>
        <entry key="deleteMarkedMoviesFromMovieHasCountry"
               value="DELETE FROM movie_has_country WHERE movie_id IN (:ids)"/>
        <entry key="deleteMarkedMoviesFromRates" value="DELETE FROM rate WHERE movie_id IN (:ids)"/>
        <entry key="deleteMarkedMoviesFromReview" value="DELETE FROM review WHERE movie_id IN (:ids)"/>
        <entry key="getReviewById"
               value="SELECT r.id, r.text, u.id user_id, u.user_type_id role, u.email
                        FROM review r, user u WHERE r.user_id=u.id AND r.id = ?"/>
        <entry key="removeReviewById" value="DELETE FROM review WHERE id=?"/>

    </util:map>


    <bean id="nbuCurrencyRateURL" class="java.lang.String">
        <constructor-arg value="https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json&amp;valcode="/>
    </bean>

</beans>